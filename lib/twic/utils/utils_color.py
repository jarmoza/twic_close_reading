from math import sqrt
from random import randrange

class Utils_Color:

    max_color_distance = sqrt(255 * 255 * 3)
    close_color_percentage = int(max_color_distance * 0.025)
    HCL_List = ["#E29D47",
                "#CA56F9",
                "#59C9E9",
                "#6CE13B",
                "#602243",
                "#35561B",
                "#D69FE3",
                "#55E8AA",
                "#DF364D",
                "#E7E0BB",
                "#E03E96",
                "#466E6F",
                "#E4DE42",
                "#5567D0",
                "#5B3317",
                "#E99A8F",
                "#2B3D65",
                "#AF4F22",
                "#92BE4F",
                "#9045AB",
                "#91A76C",
                "#8FA0C5",
                "#E57EAB",
                "#67E275",
                "#952B40",
                "#9C6170",
                "#E04123",
                "#9D9E92",
                "#76832A",
                "#499471",
                "#762570",
                "#E23ABC",
                "#1D331A",
                "#3C2226",
                "#B3926D",
                "#B8E58F",
                "#E5CB60",
                "#9A2C63",
                "#DB70DD",
                "#D2845B",
                "#DEC1E2",
                "#5CE5CB",
                "#53B674",
                "#BEF0CE",
                "#428234",
                "#4D4F9B",
                "#283440",
                "#E07627",
                "#E9AE25",
                "#9CE0E1",
                "#55141A",
                "#4AA52D",
                "#5E5518",
                "#67744B",
                "#9E75AB",
                "#AD2E93",
                "#E03774",
                "#DD645A",
                "#716061",
                "#CD5E78",
                "#BAE33D",
                "#4F95AC",
                "#905A1E",
                "#D3D9D5",
                "#7D6243",
                "#CFAE68",
                "#3D6893",
                "#86453D",
                "#5384D9",
                "#9D8EEE",
                "#361E42",
                "#D0A9A9",
                "#E06CBB",
                "#7C7792",
                "#88BDA2",
                "#91261D",
                "#31674B",
                "#533672",
                "#B4CFE9",
                "#B0A72E",
                "#A47F2D",
                "#AC5191",
                "#D898B7",
                "#8957D0",
                "#71A3E0",
                "#DF42DE",
                "#9BE1AA",
                "#639D9A",
                "#89587E",
                "#D4DE7B",
                "#BC7EE0",
                "#E4CB95",
                "#3B473F",
                "#52CDCD",
                "#B5726B",
                "#8B72C2",
                "#716BEC",
                "#3A3516",
                "#B860E6",
                "#C1D3A4"]
    HCL_IceCube = ["#139985", "#F6F7E0", "#20FCC6", "#26E2F8", "#73786B",
                  "#A8EBBE", "#AEF8F2", "#3E9DA9", "#54F4E5", "#9BC5B7",
                  "#2CC192", "#1A6E65", "#59C9C0", "#689E7D", "#749892",
                "#7FFBCF",
                "#D6CFB3",
                "#DBFFD9",
                "#91C39F",
                "#3D6465",
                "#477058",
                "#32DEBD",
                "#78D2D8",
                "#54B38B",
                "#C1D9B9",
                "#6FB0AD",
                "#B8FCE0",
                "#17BEC7",
                "#78D7AB",
                "#33908A",
                "#BFE8DE",
                "#4B8080",
                "#89F1D9",
                "#68F0F5",
                "#46C4A5",
                "#317B61",
                "#27DEDC",
                "#10A989",
                "#0ABFB3",
                "#C3D8C9",
                "#8B988D",
                "#87F8EF",
                "#16B0C4",
                "#54886F",
                "#576D66",
                "#6C8371",
                "#27AE9B",
                "#36DAAC",
                "#DFF5DC",
                "#289978",
                "#8BE6EF",
                "#9EC0A4",
                "#4B9272",
                "#537769",
                "#B4FED3",
                "#4F6753",
                "#E6E2C7",
                "#6B877F",
                "#9AE4E1",
                "#76A289",
                "#5BD3DF",
                "#44E8CF",
                "#44F1CC",
                "#14EEEB",
                "#38ADB8",
                "#43F8E0",
                "#86A89E",
                "#0A97A0",
                "#37DCE9",
                "#CACDB9",
                "#4E8D90",
                "#56E7BD",
                "#7A847A",
                "#47716B",
                "#7EAFA6",
                "#39767C",
                "#D0F0D2",
                "#A6E0B8",
                "#7AC8CB",
                "#78866F",
                "#74DEEB",
                "#ABCABE",
                "#0C8E79",
                "#B3F6E9",
                "#15CEA1",
                "#7FD1A7",
                "#5DFCF1",
                "#ACC7A9",
                "#728579",
                "#ACF1F0",
                "#38B5BD",
                "#47846A",
                "#7EFCCA",
                "#2C735C",
                "#E3F8D9",
                "#30D6B5",
                "#3E7E66",
                "#40696B",
                "#49AF88",
                "#AAF8F1"]

    HCL_Pastel = ["#80F8D9",
"#EF90C7",
"#E8C23E",
"#80C2FB",
"#9BF67C",
"#E39B7C",
"#F5F6AA",
"#E7DBE9",
"#04DBF0",
"#94B777",
"#F9FD65",
"#B0D5B8",
"#BFB0F5",
"#D8A95B",
"#AFFBB4",
"#AFEEF3",
"#4CC093",
"#B5D566",
"#DDA0B1",
"#81B6CB",
"#61C0B2",
"#5CF6B5",
"#F7CAF5",
"#6DCF81",
"#B5B540",
"#F8D68D",
"#FDEF87",
"#7FBD5E",
"#BBBB6F",
"#D99FDD",
"#A4A9D8",
"#28DEDA",
"#BDD6A0",
"#7CF894",
"#D0D953",
"#E8FC91",
"#BBB4CD",
"#87C199",
"#21DEB3",
"#E19F9B",
"#B9C9FF",
"#57DAFE",
"#C7F679",
"#DBFCB4",
"#E0B952",
"#AFFD97",
"#D0F3C4",
"#ECB87B",
"#D5C88B",
"#59CADD",
"#F5AC60",
"#FAACDF",
"#74C0C1",
"#9FE169",
"#6ABBE6",
"#44D8BB",
"#A2BF6D",
"#CCEA61",
"#6AE2A0",
"#E1D0EF",
"#DECD45",
"#ABD2FD",
"#F2E74E",
"#78CF70",
"#7AF0C2",
"#EEB6CD",
"#8BFCA7",
"#EFE26C",
"#DBF09D",
"#D0BC71",
"#FFEA9A",
"#DEA947",
"#2BCDC2",
"#FBCD61",
"#07C9E5",
"#A0F3A1",
"#6CBC91",
"#8FCC5C",
"#E2B1BC",
"#D8AD6A",
"#EEA3E4",
"#4EEBF9",
"#CBC7FF",
"#86EF91",
"#A9F9BD",
"#8DBB5F",
"#E89A73",
"#48EEBE",
"#D1F580",
"#35D7A7",
"#CCCE4A",
"#D4A650",
"#81B8F3",
"#74BCE0",
"#FDA6D7",
"#C7E7B8",
"#ECF78B",
"#FAEC59",
"#94F07C",
"#A2FB84"]

    HCL_Fluo = ["#FB3E4B",
"#0DD420",
"#439EF7",
"#393A07",
"#D045E7",
"#30CAA6",
"#CB8B9E",
"#E79B2B",
"#3A326E",
"#F2309A",
"#6E1A27",
"#A6C749",
"#256E84",
"#5C4FC5",
"#944504",
"#ADBADD",
"#1E8E4C",
"#EB87EC",
"#F24500",
"#F68A78",
"#533F50",
"#A62D98",
"#20CF63",
"#870051",
"#7C553F",
"#81C4C1",
"#7B6F13",
"#C6BC6D",
"#275939",
"#FC82BA",
"#F37140",
"#B69FF9",
"#CF2262",
"#336BA5",
"#4F7911",
"#EAAB65",
"#21A2DB",
"#B60E1B",
"#0F540D",
"#5F3B95",
"#6A2C51",
"#E29CDF",
"#AB8903",
"#11D389",
"#91646E",
"#6FBE74",
"#016D61",
"#FA0A5D",
"#717DF4",
"#A96C0D",
"#D3ADD0",
"#8D53E1",
"#F96FF6",
"#D45904",
"#EC7F99",
"#78BEE3",
"#E94E8C",
"#4BD144",
"#8B1722",
"#243548",
"#F89864",
"#B52977",
"#96C767",
"#98A3EA",
"#E6435F",
"#E60E14",
"#FE78D5",
"#812101",
"#3265B5",
"#1F4D6C",
"#2E5B5A",
"#C12A03",
"#632E24",
"#419ABD",
"#CD740F",
"#108792",
"#AF3CB8",
"#841039",
"#A51152",
"#B9018D",
"#5E5206",
"#17A882",
"#6E3280",
"#A2B520",
"#304F13",
"#FB808A",
"#25307C",
"#896DFA",
"#F85C60",
"#C6194D",
"#2F95DA",
"#AD4D04",
"#1A3369",
"#DA6AEC",
"#611F16",
"#F84CAF",
"#215F24",
"#956701",
"#546EE0",
"#E9AC5C"]

    @staticmethod
    def Get_UniqueColorList(list_size):

        # Build a color list of unique colors
        color_list = []
        color_rgbtuple_list = []

        for index in range(list_size):
            rgb_tuple = Utils_Color.Get_RandomRGB()
            hex_value = Utils_Color.RGB_to_Hex(rgb_tuple)
            while hex_value in color_list or Utils_Color.Is_CloseRGB_to_ListRGB(rgb_tuple, color_rgbtuple_list):
                rgb_tuple = Utils_Color.Get_RandomRGB(True)
                hex_value = Utils_Color.RGB_to_Hex(rgb_tuple)
            color_list.append(hex_value)
            color_rgbtuple_list.append(rgb_tuple)

        return color_list

    @staticmethod
    def Get_RandomRGB(light = False):

        has_set_on_or_off = False
        components = []
        lightest_component = 32 if light else 0
        component_lowering = 0

        for index in range(3):

            component = randrange(lightest_component,255,2) * 2
            if component > 255:
                if not has_set_on_or_off:
                    hilo = randrange(1,2,2)
                    component = 255 if 1 == hilo else lightest_component
                else:
                    component = randrange(64,192,2)
                if 255 == component or lightest_component == component:
                    has_set_on_or_off = True
            components.append(component)

        # - (0 if (components[2] < component_lowering) else component_lowering)
        return (components[0], components[1], components[2])

    @staticmethod
    def Is_CloseRGB(rgb_one, rgb_two):

        rcomp = (rgb_two[0] - rgb_one[0])
        gcomp = (rgb_two[1] - rgb_one[1])
        bcomp = (rgb_two[2] - rgb_two[2])

        distance = sqrt((rcomp * rcomp) + (gcomp * gcomp) + (bcomp * bcomp))

        return distance < Utils_Color.close_color_percentage

    @staticmethod
    def Is_CloseRGB_to_ListRGB(rgb, rgb_list):

        is_close = False
        for rgbcomp in rgb_list:
            if Utils_Color.Is_CloseRGB(rgb, rgbcomp):
                is_close = True
                break

        return is_close

    @staticmethod
    def RGB_to_Hex(rgb):

        return "#%02x%02x%02x" % rgb

